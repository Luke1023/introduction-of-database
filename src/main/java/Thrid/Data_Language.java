package Thrid;

public class Data_Language
{
    /*
    04. 데이터 언어

    데이터 언어
    - 사용자와 데이터베이스 관리 시스템 간의 통신 수단
    - 사용 목적에 따라 데이터 정의어, 데이터 조작어, 데이터 제어어로 구분

    데이터 정의어(DDL: Data Definition Language)
    - 스키마를 정의하거나, 수정 또는 삭제하기 위해 사용

    데이터 조작어(DML: Data Manipulation Language)
    - 데이터의 삽입 & 삭제 & 수정 & 검색 등의 처리를 요구하기 위해 사용
    - 데이터 조작어는 설명 방식에 따라 절차적 데이터 조작어와 비절차적 데이터 조작어로 나뉨.

    ① 절차적 데이터 조작어(procedural DML)
    - 사용자가 어떤 데이터를 원하고 해당 데이터를 얻으려면 어떻게 처리해야 하는지를 구체적으로 설명함.

    ② 비절차적 데이터 조작어(nonprocedural DML)
    - 사용자가 어떤 데이터를 원하는지만 설명한다.
    - 즉, 해당 데이터를 얻으려면 어떻게 처리해야 하는지는 데이터베이스 관리 시스템에 맡긴다.
    - 사용자가 어떤 데이터를 원하는지만 데이터베이스 관리 시스템에 선언하는 방식이기 때문에 선언적 언어(declarative language)라고도 함.

    데이터 제어어(DCL: Data Control Language)
    1. 내부적으로 필요한 규칙이나 기법을 정의하기 위해 사용
    2. 사용 목적
    - 무결성: 정확하고 유효한 데이터만 유지
    - 보안: 허가받지 않은 사용자의 데이터 접근 차단, 허가된 사용자에게 권한 부여
    - 회복: 장애가 발생해도 데이터 일관성 유지
    - 동시성 제어: 데이터 동시 공유 지원

    데이터베이스 관리 시스템
    1. 데이터베이스 관리와 사용자의 데이터 처리 요구 수행
    2. 주요 구성 요소
    ①질의 처리기(query processer)
    - 사용자의 데이터 처리 요구를 해석하여 처리
    - DDL 컴파일러, DML 프리 컴파일러, DML 컴파일러, 런타임 데이터베이스 처리기, 트랜잭션 관리자 등을 포함
    ② 저장 데이터 관리자(stored data manager)
    - 디스크에 저장된 데이터베이스와 데이터 사전을 관리하고 접근함

    트랜잭션(Transaction)
    - ‘거래’ 라는 뜻으로 데이터베이스 내에서 하나의 그룹으로 처리되어야 하는 명령문들을 모아 놓은 논리적인 작업의 단위
    - 데이터베이스 응용프로그램은 트랜잭션들의 집합으로 정의 할 수 있다.
    - 여러 단계의 처리를 하나의 처리처럼 다루는 기능임.
    - 여러 개의 명령어의 집합이 정상적으로 처리되면 정상 종료됨.
    - 하나의 명령어라도 잘못되면 전체 취소한다.
    - 트랜잭션을 쓰는 이유는 데이터 일관성을 유지하면서 안정적으로 데이터를 복구하기 위함이다.

     */
}
