package Thrid;

public class Data_modeling
{
    /*
    05. 데이터 모델링
    학습 목표
    - 데이터 모델링과 데이터 모델의 개념을 이해한다.
    - 개념적 데이터 모델인 개체 – 관계 모델을 이용해 모델링하는 방법을 익힌다.
    - 개체 – 관계 다이어그램을 작성하는 방법을 익힌다.
    - 논리적 데이터 모델의 종류와 특징을 이해한다.

    데이터 모델링(data modeling)
    - 현실 세계에 존재하는 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환 과정
    - 데이터베이스 설계의 핵심 과정

    2단계 데이터 모델링
    1. 개념적 데이터 모델링(conceptual modeling)
    - 현실 세계의 중요 데이터를 추출하여 개념 세계로 옮기는 작업

    2. 논리적 데이터 모델링(logical modeling)
    - 개념 세계의 데이터를 데이터베이스에 저장하는 구조로 표현하는 작업

    데이터 모델(data model)
    - 데이터 모델링의 결과물을 표현하는 도구
    1. 개념적 데이터 모델
    - 사람의 머리로 이해할 수 있도록 현실 세계를 개념적 모델링하여 데이터베이스의 개념적 구조로 표현하는 도구
    Ex) 개체 – 관계 모델

    2. 논리적 데이터 모델
    - 개념적 구조를 논리적 모델링하여 데이터베이스의 논리적 구조로 표현하는 도구
    Ex) 관계 데이터 모델

    데이터 모델의 구성
    1. 데이터 구조(data structure)
    ① 개념적 데이터 모델에서 개념적 구조
    - 현실 세계를 개념 세계로 추상화했을 때 어떤 요소로 이루어져 있는지 표현
    ② 논리적 데이터 모델에서 논리적 구조
    - 데이터를 어떤 모습으로 저장할 것인지 표현
    ③ 정적 특징

    2. 연산(operation)
    ① 개념 세계나 컴퓨터 세계에서 실제로 표현된 값들을 처리하는 작업
    ② 동적 특징

    3. 제약조건(constraint) -> 데이터 무결성 유지 목적
    ① 구조적 측면의 제약 상황
    ② 연산을 적용하는 경우 허용할 수 있는 의미적 측면의 제약 상황

    개체 – 관계 모델(E-R model: Entity-Relationship model)
    - 피터 첸(Peter Chen)이 제안한 개념적 데이터 모델
    - 개체와 개체 간의 관계를 이용해 현실 세계를 개념적 구조로 표현
    - 핵심 요소: 개체, 속성, 관계

    개체 – 관계 다이어그램(E-R diagram)
    - E-R 다이어그램
    - 개체 – 관계 모델을 이용해 현실 세계를 개념적으로 모델링한 결과물을 그림으로 표현한 것

    개체(Entity)
    - 현실 세계에서 조직을 운영하는 데 꼭 필요한 사람이나 사물과 같이 구별되는 모든 것
    - 저장할 가치가 있는 중요 데이터를 가지고 있는 사람이나 사물, 개념, 사건 등
    - 다른 개체와 구별되는 이름을 가지고 있고, 각 개체만의 고유한 특성이나 상태, 즉 속성을 하나 이상 가지고 있음
    Ex) 서점에 필요한 개체: 고객, 책
    Ex) 학교에 필요한 개체: 학과, 과목
    - 파일 구조의 레코드(record)와 대응됨.

    개체 타입(entity type)
    - 개체를 고유한 이름과 속성들로 정의한 것
    - 파일 구조의 레코드 타입(record type)에 대응됨

    개체 인스턴스(entity instance)
    - 개체를 구성하고 있는 속성이 실제 값을 가짐으로써 실체화된 개체
    - 개체 어커런스(entity occurrence)라고도 함.
    - 파일 구조의 레코드 인스턴스(record instance)에 대응됨

    속성(attribute)
    - 개체나 관계가 가지고 있는 고유한 특성
    - 의미 있는 데이터의 가장 작은 논리적 단위
    - 파일 구조의 필드(field)와 대응됨
    - E-R 다이어그램에서 타원으로 표현하고 타원 안에 이름을 표기

    단일 값 속성과 다중 값 속성
    ① 단일 값 속성(single-valued attribute)
    - 값을 하나만 가질 수 있는 속성
    Ex) 고객 개체의 이름
    ② 다중 값 속성(multi-valued attribute)
    - 여러 개의 값을 가질 수 있는 속성
    Ex) 책 개체를 구성하는 저자 속성(책 인스턴스에 저자가 여러 명일 수 있음)

    단순 속성과 복합 속성
    1. 단순 속성(simple attribute)
    - 의미를 더는 분해할 수 없는 속성
    Ex) 고객 개체의 적립금 속성
    Ex) 책 개체의 이름, ISBN, 가격 속성
    2. 복합 속성(composite attribute)
    - 의미를 분해할 수 있어 값이 여러개의 의미를 포함하는 속성
    Ex) 주소 속성
    Ex) 고객 개체의 생년월일 속성

    유도 속성(derived attribute)
    - 기존의 다른 속성의 값에서 유도되어 결정되는 속성
    - 값이 별도로 저장되지 않음
    Ex) 책 개체의 가격과 할인율 속성으로 계산되는 판매가격 속성

    널 속성(null attribute)
    - 널 값이 허용되는 속성

    널(null) 값
    - 아직 결정되지 않았거나 모르는 값 또는 존재하지 않는 값
    - 공백이나 0과는 의미가 다름
    Ex) 등급 속성이 널 값 -> 등급이 아직 결정되지 않았음을 의미

    키 속성(key attribute)
    - 각 개체 인스턴스를 식별하는 데 사용되는 속성
    - 모든 개체 인스턴스의 키 속성 값이 다름
    - 둘 이상의 속성들로 구성되기도 함
    Ex) 고객 개체의 고객아이디 속성
    - E-R 다이어그램에서 밑줄로 표현

    관계(Relationship)
    - 개체와 개체가 맺고 있는 의미 있는 연관성
    - 개체 집합들 사이의 대응 관계, 즉 매핑(mapping)을 의미
    Ex) 고객 개체와 책 개체 간의 구매 관계
    - E-R 다이어그램에서 마름모로 표현

    관계의 유형: 관계에 참여하는 개체 타입의 수 기준
    - 이항 관계: 개체 타입 2개가 맺는 관계
    - 삼항 관계: 개체 타입 3개가 맺는 관계
    - 순환 관계: 개체 타입 1개가 자기 자신과 맺는 관계

    관계의 유형: 매핑 카디널리티 기준
    - 일대일(1:1) 관계
    - 일대다(1:n) 관계
    - 다대다(n:m) 관계

    매핑 카디널리티(mapping cardinality)
    - 관계를 맺는 두 개체 집합에서, 각 개체 인스턴스가 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수

    일대일(1:1) 관계
    - 개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 하나와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 하나와 관계를 맺을 수 있음.

    일대다(1:n) 관계
    - 개체 A의 각 개체 인스턴스는 개체 B의 개체 인스턴스 여러 개와 관계를 맺을 수 있지만, 개체 B의 각 개체 인스턴스는 개체 A의 개체 인스턴스 하나와만 관계를 맺을 수 있다면 두 개체는 일대다 관계임.

    다대다(n:m) 관계
    - 개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 여러 개와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 여러 개와 관계를 맺을 수 있음.

    관계의 참여 특성
    1. 필수적 참여(전체 참여)
    - 모든 개체 인스턴스가 관계에 반드시 참여해야 되는 것을 의미
    Ex) 고객 개체가 책 개체와의 구매 관계에 필수적으로 참여
    - 모든 고객은 책을 반드시 구매해야 함
    - E-R 다이어그램에서 이중선으로 표현

    2. 선택적 참여(부분 참여)
    - 개체 A의 개체 인스턴스 중 일부만 관계에 참여해도 되는 것

    관계의 종속성
    1. 약한 개체(weak entity)
    - 다른 개체의 존재 여부에 의존적인 개체
    2. 강한 개체(strong entity)
    - 다른 개체의 존재 여부를 결정하는 개체
    3. 특징
    - 강한 개체와 약한 개체는 일반적으로 일대다의 관계
    - 약한 개체는 강한 개체와의 관계에 필수적으로 참여
    - 약한 개체는 자신이 지닌 속성만으로는 식별이 어려워 일반적으로 강한 개체의 키를 포함하여 키를 구성함

    E-R 다이어그램
    - 사각형: 개체를 표현
    - 마름모: 관계를 표현
    - 타원: 속성을 표현
    - 링크(연결선): 각 요소를 연결
    - 레이블: 일대일, 일대다, 다대다 관계를 표기

    논리적 데이터 모델의 개념
    ① E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 형태로 표현한 논리적 구조
    - 데이터베이스의 논리적 구조 = 데이터베이스 스키마(schema)
    ② 사용자가 생각하는 데이터베이스의 모습 또는 구조
    ③ 관계 데이터 모델, 계층 데이터 모델, 네트워크 데이터 모델 등이 있음

    관계 데이터 모델
    - 일반적으로 많이 사용되는 논리적 데이터 모델
    - 데이터베이스의 논리적 구조가 2차원 테이블 형태

    계층 데이터 모델(hierarchical data model)
    - 데이터베이스의 논리적 구조가 트리(tree) 형태
    - 루트 역할을 하는 개체가 존재하고 사이클이 존재하지 않음
    - 개체 간에 상하관계가 성립
    1. 부모 개체 / 자식 개체
    2. 부모와 자식 개체는 일대다(1:n) 관계만 허용됨
    - 두 개체 사이에 하나의 관계만 정의할 수 있음
    - 다대다(n:m) 관계를 직접 표현할 수 없음
    - 개념적 구조를 모델링하기 어려워 구조가 복잡해질 수 있음
    - 데이터의 삽입 & 삭제 & 수정 & 검색이 쉽지 않음

    네트워크 데이터 모델(network data model)
    - 데이터베이스의 논레적 구조가 그래프(graph) 또는 네트워크(network) 형태임
    - 개체는 사각형, 개체들 간의 관계는 화살표로 나타냄. 화살표는 일대 다 관계만 표현할 수 있음.
    - 네트워크 모델에서는 계층 데이터 모델과 달리 두 개체 간의 관계를 여러 개 정의할 수 있어 관계를 이름으로 구별할 수 있음.
    - 네트워크 데이터 모델에서도 일대 다 관계만 직접 표현할 수 있으므로 두 개체 사이의 일대다 관계들을 이용해 다대다 관계를 표현함.
    - 네트워크 데이터 모델에서는 일대다 관계의 개체들을 각각 오너와 멤버라 부르고, 이들 사이의 관계를 오너-멤버 관계(owner-member relationship)라 부른다.
    - 계층 데이터 모델과 달리 오너 개체 하나가 멤버 개체 여러 개와 관계를 맺을 수 있고 멤버 개체도 오너 개체 여러개와 관계를 맺을 수 있다.
    - 네트워크 데이터 모델은 같은 개체들 사이의 관계를 2개 이상 표현할 수 있어 계층 데이터 모델보다 개념적 구조를 논리적 구조로 좀 더 자연스럽게 모델링 할 수 있다. 그러나, 계층 데이터 모델보다 구조가 훨씬 복잡해질 수 있어, 데이터의 삽입 & 수정 & 삭제 같은 연산과 데이터 검색이 계층 데이터 모델보다 더 어려워지는 문제가 발생함.

     */
}
